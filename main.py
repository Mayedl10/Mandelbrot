"""
Thanks to FaFeJo on Scratch for help and the original scratch project.
"""

import pygame
import draw as dr #imports draw.py

pygame.init() #initiates pygame
pygame.font.init()  #text
pygame.mixer.init() #sounds


FPS = 60 # framerate
ROOT_N = "Mandelbrot" # name of window
WIDTH, HEIGHT = 1500, 900 # width, height of window

ROOT = pygame.display.set_mode((WIDTH,HEIGHT)) # Window
pygame.display.set_caption(ROOT_N) # Sets name of window

COMIC_SANS = pygame.font.SysFont("comicsans",40) # initiates comicsans size 40 as font


STD_BGCOL = (255,255,255)

#COLOURMAP = [(255,0,0),(255,128,0),(255,255,0),(128,255,0),(0,255,0),(0,255,125),(0,255,255),(0,128,255),(0,0,255)]            original colourmap, limited and not generated
#COLOURMAP = [(0,255,0),(128,255,0),(255,255,0),(255,128,0),(255,0,0),(255,0,125),(255,0,255),(128,0,255),(0,0,255)]             #r and g from original colourmap swapped swapped
COLOURMAP = [(255,3,0),(255,7,0),(255,11,0),(255,15,0),(255,19,0),(255,23,0),(255,27,0),(255,31,0),(255,35,0),(255,39,0),(255,43,0),(255,47,0),(255,51,0),(255,55,0),(255,59,0),(255,63,0),(255,67,0),(255,71,0),(255,75,0),(255,79,0),(255,83,0),(255,87,0),(255,91,0),(255,95,0),(255,99,0),(255,103,0),(255,107,0),(255,111,0),(255,115,0),(255,119,0),(255,123,0),(255,127,0),(255,131,0),(255,135,0),(255,139,0),(255,143,0),(255,147,0),(255,151,0),(255,155,0),(255,159,0),(255,163,0),(255,167,0),(255,171,0),(255,175,0),(255,179,0),(255,183,0),(255,187,0),(255,191,0),(255,195,0),(255,199,0),(255,203,0),(255,207,0),(255,211,0),(255,215,0),(255,219,0),(255,223,0),(255,227,0),(255,231,0),(255,235,0),(255,239,0),(255,243,0),(255,247,0),(255,251,0),(251,255,0),(247,255,0),(243,255,0),(239,255,0),(235,255,0),(231,255,0),(227,255,0),(223,255,0),(219,255,0),(215,255,0),(211,255,0),(207,255,0),(203,255,0),(199,255,0),(195,255,0),(191,255,0),(187,255,0),(183,255,0),(179,255,0),(175,255,0),(171,255,0),(167,255,0),(163,255,0),(159,255,0),(155,255,0),(151,255,0),(147,255,0),(143,255,0),(139,255,0),(135,255,0),(131,255,0),(127,255,0),(123,255,0),(119,255,0),(115,255,0),(111,255,0),(107,255,0),(103,255,0),(99,255,0),(95,255,0),(91,255,0),(87,255,0),(83,255,0),(79,255,0),(75,255,0),(71,255,0),(67,255,0),(63,255,0),(59,255,0),(55,255,0),(51,255,0),(47,255,0),(43,255,0),(39,255,0),(35,255,0),(31,255,0),(27,255,0),(23,255,0),(19,255,0),(15,255,0),(11,255,0),(7,255,0),(3,255,0),(0,255,3),(0,255,7),(0,255,11),(0,255,15),(0,255,19),(0,255,23),(0,255,27),(0,255,31),(0,255,35),(0,255,39),(0,255,43),(0,255,47),(0,255,51),(0,255,55),(0,255,59),(0,255,63),(0,255,67),(0,255,71),(0,255,75),(0,255,79),(0,255,83),(0,255,87),(0,255,91),(0,255,95),(0,255,99),(0,255,103),(0,255,107),(0,255,111),(0,255,115),(0,255,119),(0,255,123),(0,255,127),(0,255,131),(0,255,135),(0,255,139),(0,255,143),(0,255,147),(0,255,151),(0,255,155),(0,255,159),(0,255,163),(0,255,167),(0,255,171),(0,255,175),(0,255,179),(0,255,183),(0,255,187),(0,255,191),(0,255,195),(0,255,199),(0,255,203),(0,255,207),(0,255,211),(0,255,215),(0,255,219),(0,255,223),(0,255,227),(0,255,231),(0,255,235),(0,255,239),(0,255,243),(0,255,247),(0,255,251),(0,251,255),(0,247,255),(0,243,255),(0,239,255),(0,235,255),(0,231,255),(0,227,255),(0,223,255),(0,219,255),(0,215,255),(0,211,255),(0,207,255),(0,203,255),(0,199,255),(0,195,255),(0,191,255),(0,187,255),(0,183,255),(0,179,255),(0,175,255),(0,171,255),(0,167,255),(0,163,255),(0,159,255),(0,155,255),(0,151,255),(0,147,255),(0,143,255),(0,139,255),(0,135,255),(0,131,255),(0,127,255),(0,123,255),(0,119,255),(0,115,255),(0,111,255),(0,107,255),(0,103,255),(0,99,255),(0,95,255),(0,91,255),(0,87,255),(0,83,255),(0,79,255),(0,75,255),(0,71,255),(0,67,255),(0,63,255),(0,59,255),(0,55,255),(0,51,255),(0,47,255),(0,43,255),(0,39,255),(0,35,255),(0,31,255),(0,27,255),(0,23,255),(0,19,255),(0,15,255),(0,11,255),(0,7,255),(0,3,255),(3,0,255),(7,0,255),(11,0,255),(15,0,255),(19,0,255),(23,0,255),(27,0,255),(31,0,255),(35,0,255),(39,0,255),(43,0,255),(47,0,255),(51,0,255),(55,0,255),(59,0,255),(63,0,255),(67,0,255),(71,0,255),(75,0,255),(79,0,255),(83,0,255),(87,0,255),(91,0,255),(95,0,255),(99,0,255),(103,0,255),(107,0,255),(111,0,255),(115,0,255),(119,0,255),(123,0,255),(127,0,255),(131,0,255),(135,0,255),(139,0,255),(143,0,255),(147,0,255),(151,0,255),(155,0,255),(159,0,255),(163,0,255),(167,0,255),(171,0,255),(175,0,255),(179,0,255),(183,0,255),(187,0,255),(191,0,255),(195,0,255),(199,0,255),(203,0,255),(207,0,255),(211,0,255),(215,0,255),(219,0,255),(223,0,255),(227,0,255),(231,0,255),(235,0,255),(239,0,255),(243,0,255),(247,0,255),(251,0,255),(255,0,251),(255,0,247),(255,0,243),(255,0,239),(255,0,235),(255,0,231),(255,0,227),(255,0,223),(255,0,219),(255,0,215),(255,0,211),(255,0,207),(255,0,203),(255,0,199),(255,0,195),(255,0,191),(255,0,187),(255,0,183),(255,0,179),(255,0,175),(255,0,171),(255,0,167),(255,0,163),(255,0,159),(255,0,155),(255,0,151),(255,0,147),(255,0,143),(255,0,139),(255,0,135),(255,0,131),(255,0,127),(255,0,123),(255,0,119),(255,0,115),(255,0,111),(255,0,107),(255,0,103),(255,0,99),(255,0,95),(255,0,91),(255,0,87),(255,0,83),(255,0,79),(255,0,75),(255,0,71),(255,0,67),(255,0,63),(255,0,59),(255,0,55),(255,0,51),(255,0,47),(255,0,43),(255,0,39),(255,0,35),(255,0,31),(255,0,27),(255,0,23),(255,0,19),(255,0,15),(255,0,11),(255,0,7),(255,0,3)]

ZOOM = 300
draw_size = 1
x = 0
y = 0
draw_colour = (0,0,0)

def draw_window(zoom, x_offset = 0, y_offset = 0):
    global x, y, draw_colour, draw_size
    ROOT.fill(STD_BGCOL)

    for j in range(HEIGHT):
        for k in range(WIDTH):
            x += draw_size
            r_part = 0
            i_part = 0
            i = 0

            while not((i > 50) or (r_part*r_part + i_part*i_part) > 100):
                next_r_part = ((r_part*r_part)-(i_part*i_part)) + (x-WIDTH/2)/zoom + x_offset
                next_i_part = (2*(r_part*i_part)) - (y-HEIGHT/2)/zoom - y_offset
                r_part = next_r_part
                i_part = next_i_part

                i += 1
            
            if i > 50:
                draw_colour = (0,0,0)
                dr.draw_square(ROOT, x, y, draw_size, draw_colour)
            else:
                draw_colour = (255,0,0)
                #draw_colour = (i%255, 255, 50)
                #draw_colour = COLOURMAP[i % len(COLOURMAP)]
                draw_colour = COLOURMAP[(i * 2) % len(COLOURMAP)]
                dr.draw_square(ROOT, x, y, draw_size, draw_colour)

        x = 0
        y += draw_size




    pygame.display.update()

def main():
    global x, y
    clock = pygame.time.Clock() # initiates the clock used for fps monitoring

    cur_zoom = ZOOM
    xoffset, yoffset = 0, 0

    draw_window(ZOOM) # draws screen

    run = True
    while run:
        clock.tick(FPS) # regulates fps

        for event in pygame.event.get():    #
            if event.type == pygame.QUIT:   # checks if the "X" is clicked
                run = False                 #

        #place for funtions

        if any(pygame.mouse.get_pressed()):
            print("begin zoom...")

            mouse_pos = pygame.mouse.get_pos() # (x,y)
            xoffset = ((mouse_pos[0]-WIDTH/2)/cur_zoom + xoffset)

            yoffset = ((mouse_pos[1]-HEIGHT/2)/cur_zoom + yoffset)

            cur_zoom = cur_zoom*2

            x, y = 0, 0
            print("drawing...")
            draw_window(cur_zoom, xoffset, yoffset)
            print("done zooming!\n")

        keys_pressed = pygame.key.get_pressed()
        if keys_pressed[pygame.K_SPACE]:
            print("reset")
            cur_zoom = 300
            xoffset, yoffset, x, y = 0, 0, 0, 0
            draw_window(cur_zoom)





    pygame.quit() # closes pygame



    

if __name__ == "__main__":
    main()